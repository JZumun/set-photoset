/*
Dynamic Resizing of Images in a Photoset

USAGE:
jzmn.setPhotoset(photoset,userOptions);
				- 
				or, 
	  if with the jzmn function 
				- 
jzmn(photoset).setPhotoset(userOptions);

ARGUMENTS
	photoset    - an element node, nodelist, or css-selector string

	userOptions - [OPTIONAL] object containing user-defined settings:
		layout      - string or array of numbers defining layout of photoset. 
					  Defaults to zero, wherein layout info is acquired from 
					  data-layout attribute if existing, or else nothing happens;

		immediate   - boolean determining whether to immediately invoke function.
					  Default is false (function executes when all IMG have loaded. If childItem is set, is assumed true). 
					  Set this to true if height and width data are provided.
					  using data attributes in the img element defined in childHeight and childWidth.

		childHeight - attribute used to retrieve height to use, if immediate. Default is 'height'
		childWidth  - attribute used to retrieve width to use, if immediate. Default is 'width'
		childItem   - CSS-selector string used to determine what elements to turn into a photoset. 
					  Default is 'img'. Requires setting appropriate childHeight and childWidth if set to something else.

		gutter      - Number or CSS measure string that sets the spacing b/w images
					  Default is zero. If string, can be any valid string inside a 
					  CSS calc() function. If number, is set in pixels.

		callback    - callback function invoked after a photoset is layouted.
					  Takes photoset DOM element as first argument

		createSheet	- boolean determining whether a stylesheet containing 
					  the needed stylings for jzmn classes shouled be created, if it doesnt exist.
					  Default is true. Set to false if you want to make your own stylesheet. See setphotoset-example.css for sample.

	grouping    - [OPTIONAL] CSS-selector friendly string to group photosets together, for similar styling. 
				  Resulting CSS selector will be of the format "photoset-{grouping}". 
				  If not provided, is randomly generated for a nodelist or jzmn collection.
RETURNS
	DOM element of photoset || Array of photoset DOM elements;
*/
var jzmn=function(t){"use strict"
function e(t,e,r){function o(o){o.target&&"IMG"===o.target.nodeName&&(a-=1),0===a&&e.apply(t,r)}var n=t.querySelectorAll("img"),a=n.length
return Array.prototype.forEach.call(n,function(t,e){t.complete&&(a-=1)}),0===a?void e.apply(t,r):(t.addEventListener("load",o,!0),void t.addEventListener("error",o,!0))}function r(t,e,r){var o=Array.prototype.slice.call(t.querySelectorAll(e.childItem)),n=Array.isArray(e.layout)?e.layout:(e.layout||t.getAttribute("data-layout")||"").split("").map(function(t){return parseInt(t)}),a=n.length
n.reduce(function(n,l,s,i){var c=n+l,u=o.slice(n,c),h=u.length
t.classList.add("photoset-container"),t.classList.add("photoset-"+r)
var d=u.map(function(t,r){var o
return t.classList.add("photoset-item"),t.classList.remove("photoset-last-column"),t.classList.remove("photoset-last-row"),r===h-1&&t.classList.add("photoset-last-column"),s===a-1&&t.classList.add("photoset-last-row"),o=e.immediate?parseInt(t.getAttribute(e.childHeight))/parseInt(t.getAttribute(e.childWidth)):t.naturalHeight/t.naturalWidth,o!==o&&(o=1),o}),m=[],p=e.gutter
return u.forEach(function(t,e){var r=d[e]
0===e?m[e]=100/d.reduce(function(t,e){return t+r/e},0):e===h-1?m[e]=100-m.reduce(function(t,e){return t+e},0):m[e]=m[0]*(d[0]/r),t.setAttribute("style","width: "+m[e]+"%; "+(p?"width: calc("+m[e]/100+"*(100% - "+(h-1)+"*("+p+")))":""))}),c},0),e.callback&&e.callback(t)}function o(t,e){var r=document.querySelector("#jzmn-setphotoset-styles")
r||(r=document.createElement("style"),r.setAttribute("type","text/css"),r.setAttribute("id","jzmn-setphotoset-styles"),r.appendChild(document.createTextNode("")),document.head.appendChild(r),[".photoset-container:after {content:'';display:table;clear:both;}",".photoset-item { display:block;float:left;margin:0;height:auto;}",".photoset-last-column {margin-right:0 !important;}",".photoset-last-column + .photoset-item {clear:left}",".photoset-last-row {margin-bottom:0 !important;}"].forEach(function(t){r.sheet.insertRule(t,r.sheet.cssRules.length)})),!n[e]&&t.gutter&&(n[e]=t.gutter,r.sheet.insertRule(".photoset-"+e+" .photoset-item {margin:calc("+t.gutter+");margin-left:0;margin-top:0;}",r.sheet.cssRules.length))}var n={}
return t.setPhotoset=function a(t,n,l){if(l=l||Math.floor(1e5*Math.random()+1).toString(),!t)throw new Error("[setPhotoset] Argument cannot be null.")
if(t.toString()===t)return a(document.querySelectorAll(t),n,l)
if(t.length)return Array.prototype.map.call(t,function(t,e){a(t,n,l)})
if(!t.nodeType)throw new Error("[setPhotoset] Argument is not an Element")
n=n||{}
var s={layout:0,immediate:!1,childItem:"img",childHeight:"height",childWidth:"width",gutter:0,callback:null,createSheet:!0}
return Object.keys(n).map(function(t){t in s&&(s[t]=n[t])}),s.gutter=s.gutter?s.gutter.toString()===s.gutter?s.gutter:s.gutter+"px":null,s.createSheet&&o(s,l),s.immediate?r(t,s,l):e(t,r,[t,s,l]),t},t.extendFn&&t.extendFn({setPhotoset:t.setPhotoset}),t}(jzmn||{})
